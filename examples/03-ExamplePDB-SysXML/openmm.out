
>>> ###################################################################
>>> # To use this script, paste all of the lines starting with the
>>> # three less than signs (>>>) into a python interpreter.
>>> ###################################################################
>>> 
>>> from simtk.unit import *
>>> from simtk import openmm as mm
>>> from simtk.openmm import app
>>> 
>>> pdb = app.PDBFile('input.pdb')
>>> topology = pdb.topology
>>> positions = pdb.positions
>>> system = XmlSerializer.deserializeSystem(open(system.xml).read())
########################################################################
# Option Summary. A more detailed config file is saved to config.out.ini
########################################################################

[General]                       
protein = None                   # default value
water = None                     # default value
platform = NotSpecified          # default value
coords = input.pdb               # your selection
precision = Mixed                # default value

[System]                        

[Dynamics]                      
integrator = Langevin            # default value
dt = 2*femtosecond               # default value
temp = 300*kelvin                # default value
collision_rate = 1.0/picosecond  # default value

[Simulation]                    
n_steps = 10000                  # default value
restart_file = restart.p         # default value
minimize = True                  # default value
restart_freq = 5000              # default value
traj_file = output.dcd           # default value
read_restart = False             # default value
progress_freq = 1000             # default value
write_restart = True             # default value
traj_freq = 1000                 # default value

>>> integrator = mm.LangevinIntegrator(300*kelvin, 1.0/picosecond, 2*femtosecond)
>>> platform = mm.Platform.getPlatformByName('CUDA')
>>> platformProperties = {'CudaPrecision': 'mixed'}
>>> simulation = app.Simulation(topology, system, integrator, platform, properties)
>>> simulation.context.setPositions(positions)
>>> simulation.minimizeEnergy()
>>> simulation.context.setVelocitiesToTemperature()
>>> simulation.reporters.append(ProgressReporter(sys.stdout, 1000, 10000))
>>> simulation.reporters.append(DCDReporter(output.dcd, 1000))
>>> simulation.reporters.append(RestartReporter(restart.p, 5000))
>>> simulation.step(10000)


Progress WallTime Left    Speed          Time            P.E.          K.E.      Total E.          Temp      Vol        Rho
     (%)     (d:h:m:s) (ns/day)          (ps)        (kJ/mol)      (kJ/mol)      (kJ/mol)           (K)   (nm^3)     (g/mL)
  0.000%            ??     0.00       0.00000   -145831.59777   22367.52747 -123464.07030     298.54534    87.87     1.0185
 10.000%          3:10     8.16       2.00000   -120767.72091   19993.04911 -100774.67180     266.85254    87.87     1.0185
 20.000%          2:49     8.18       4.00000   -117522.08211   21876.64579  -95645.43632     291.99341    87.87     1.0185
 30.000%          2:27     8.18       6.00000   -116006.48024   22435.62994  -93570.85030     299.45432    87.87     1.0185
 40.000%          2:06     8.17       8.00000   -115384.21497   22636.89325  -92747.32172     302.14063    87.87     1.0185
 50.000%          1:46     8.13      10.00000   -115380.19994   22341.58227  -93038.61767     298.19904    87.87     1.0185
 60.000%          1:25     8.06      12.00000   -115572.30394   22381.33336  -93190.97059     298.72961    87.87     1.0185
 70.000%          1:04     8.02      14.00000   -115727.30640   22357.69430  -93369.61210     298.41409    87.87     1.0185
 80.000%          0:43     7.99      16.00000   -115107.82610   22424.07238  -92683.75372     299.30006    87.87     1.0185
 90.000%          0:21     7.97      18.00000   -114978.27065   22498.46131  -92479.80933     300.29294    87.87     1.0185
100.000%          0:00     7.94      20.00000   -115036.71338   22369.82609  -92666.88729     298.57602    87.87     1.0185
