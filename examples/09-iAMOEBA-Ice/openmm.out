>>> ###################################################################
>>> # To use this script, paste all of the lines starting with the
>>> # three greater than signs (>>>) into a python interpreter.
>>> ###################################################################
>>> 
>>> from simtk.unit import *
>>> from simtk import openmm as mm
>>> from simtk.openmm import app
>>> 
>>> pdb = app.PDBFile('ice-water.pdb')
>>> topology = pdb.topology
>>> positions = pdb.positions
>>> forcefield = app.ForceField('iamoeba.xml')
>>> system = forcefield.createSystem(topology,nonbondedMethod=PME,constraints=HBonds
... ,rigidWater=False,nonbondedCutoff=1.0*nanometer,useDispersionCorrection=True,pol
... arization=direct,ewaldErrorTolerance=0.0005)
>>> system.addForce(mm.MonteCarloAnisotropicBarostat([1, 1, 1], 261*kelvin, 25,
... True, True, True)
>>> integrator = mm.LangevinIntegrator(261*kelvin, 1.0/picosecond, 0.5*femtosecond)
>>> platform = mm.Platform.getPlatformByName('CUDA')
>>> platformProperties = {'CudaPrecision': 'mixed'}
########################################################################
# Option Summary. A more detailed config file is saved to config.out.ini
########################################################################

[General]                        
platform = CUDA                   # your selection
coords = ice-water.pdb            # your selection
precision = Mixed                 # default value
ffxml = iamoeba.xml               # your selection
protein = None                    # default value
water = None                      # default value

[System]                         
nb_method = PME                   # default value
constraints = HBonds              # default value
rigid_water = False               # your selection
rand_vels = True                  # default value
disp_corr = True                  # default value
ewald_tol = 0.0005                # default value
cutoff = 1.0*nanometer            # default value
gen_temp = 261*kelvin             # your selection
vdw_cutoff = 1.0*nanometer        # default value
polarization = direct             # your selection

[Dynamics]                       
integrator = Langevin             # default value
dt = 0.5*femtosecond              # your selection
temp = 261*kelvin                 # your selection
collision_rate = 1.0/picosecond   # default value
barostat = MonteCarloAnisotropic  # your selection
thermostat = None                 # default value
pressure3 = 1 1 1                 # default value
barostat_interval = 25            # default value
scalex = True                     # default value
scaley = True                     # default value
scalez = True                     # default value

[Simulation]                     
n_steps = 20000                   # your selection
restart_file = restart.json.bz2   # default value
minimize = True                   # default value
restart_freq = 5000               # default value
traj_file = output.dcd            # default value
read_restart = False              # default value
progress_freq = 1000              # default value
write_restart = True              # default value
traj_freq = 1000                  # default value

>>> simulation = app.Simulation(topology, system, integrator, platform, properties)
